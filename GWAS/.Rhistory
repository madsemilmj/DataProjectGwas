labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(10, 100000, 100000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- (assoc_filegwax$BETA)/(assoc_filegwax$z)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA, na.rm = TRUE))/sd(assoc_filegwax$BETA, na.rm = TRUE)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
print(est$SE- mean(assoc_filegwax$SE, na.rm = T))
true_beta <- x_normal*true_beta
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE))/sd(assoc_filegwax$SE), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(10, 100000, 100000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- (assoc_filegwax$BETA)/(assoc_filegwax$z)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA, na.rm = TRUE))/sd(assoc_filegwax$BETA, na.rm = TRUE)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
print(est_beta)
print(est$SE- mean(assoc_filegwax$SE, na.rm = T))
true_beta <- x_normal*true_beta
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE))/sd(assoc_filegwax$SE), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(10, 100000, 100000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- (assoc_filegwax$BETA)/(assoc_filegwax$z)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA, na.rm = TRUE))/sd(assoc_filegwax$BETA, na.rm = TRUE)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
print(est_beta)
print(est$SE- mean(assoc_filegwax$SE, na.rm = T))
true_beta <- x_normal*true_beta
print(true_beta)
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE, na.rm = T))/sd(assoc_filegwax$SE, na.rm = T), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(10, 100000, 100000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- (assoc_filegwax$BETA)/(assoc_filegwax$z)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA, na.rm = TRUE))/sd(assoc_filegwax$BETA, na.rm = TRUE)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
print(est_beta)
print(est$SE- mean(assoc_filegwax$SE, na.rm = T))
true_beta <- x_normal*true_beta
print(true_beta)
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE, na.rm = T))/sd(assoc_filegwax$SE, na.rm = T), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(1000, 100000, 100000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- (assoc_filegwax$BETA)/(assoc_filegwax$z)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA, na.rm = TRUE))/sd(assoc_filegwax$BETA, na.rm = TRUE)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
true_beta <- x_normal*true_beta
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE, na.rm = T))/sd(assoc_filegwax$SE, na.rm = T), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(100, 100000, 100000, 50, 0)
linearregressionplotgwax(100, 1000, 1000, 50, 0)
linearregressionplotgwax(100, 10000, 50000, 50, 0)
View(assoc_filegwax)
linearregressionplotgwax(58706, 10000, 50000, 50, 0)
linearregressionplotgwax(58706, 10000, 50000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- ifelse(assoc_filegwax$z!=0, (assoc_filegwax$BETA)/(assoc_filegwax$z), 0.0000001)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA))/sd(assoc_filegwax$BETA)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
true_beta <- x_normal*true_beta
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE))/sd(assoc_filegwax$SE), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(58706, 10000, 50000, 50, 0)
linearregressionplotgwax <- function(SNPno, total_indiv, SNP, h, sib){
assoc_file<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,"_",sib,".assoc", sep="")
if (file.exists(assoc_file)) {
assoc_filegwax <- data.table::fread(assoc_file)
beta_file <- data.table::fread(paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
mf <- data.table::fread(paste("./data/MAF","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h,"_",5,".txt", sep=""))
assoc_filegwax$BETA <- log(assoc_filegwax$OR)
assoc_filegwax$z <-  sign(assoc_filegwax$OR - 1)* sqrt(assoc_filegwax$CHISQ)
assoc_filegwax$SE <- ifelse(assoc_filegwax$z!=0, (assoc_filegwax$BETA)/(assoc_filegwax$z), 0.9)
#Creating bonferroni adjusted p-values
est <- assoc_filegwax %>%
dplyr::filter(SNP == SNPno)
true <- beta_file %>%
dplyr::filter(V1 == SNPno)
true_beta <- (true$V2- mean(beta_file$V2))/sd(beta_file$V2)
est$BETA_norm <- (est$BETA - mean(assoc_filegwax$BETA))/sd(assoc_filegwax$BETA)
x <- c(0,1,2)
x_normal<-(x-(2*as.numeric(mf[1, SNPno, with=FALSE])))/(sqrt(2*as.numeric(mf[1,SNPno, with=FALSE])*(1-as.numeric(mf[1,SNPno, with=FALSE]))))
est_beta = x_normal *est$BETA_norm
true_beta <- x_normal*true_beta
df <- tibble::tibble(x = x_normal, est_beta=est_beta, sd= (est$SE- mean(assoc_filegwax$SE))/sd(assoc_filegwax$SE), true_beta=true_beta )
colors <- c("SE-band" = "red", "Est. Beta" = "steelblue", "True Beta" = "black")
h <- ggplot(df, aes(x=x_normal)) +
geom_line(aes(y=est_beta, color = "Est. Beta"))+
geom_line(aes(y=true_beta, color = "True Beta"))+
geom_line(aes(y=est_beta-sd, color="SE-band"), linetype="twodash")+
geom_line(aes(y=est_beta+sd, color="SE-band"), linetype="twodash")+
labs(x = paste("SNP number: ",SNPno,sep=""), y = "Pheno",color="Legend") +
scale_color_manual(values = colors) +
theme_light()
return(h)
} else {
print("No data exists! - Try another predefined or run our simulation")
}
}
linearregressionplotgwax(58706, 10000, 50000, 50, 0)
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gwasproject', token='DB0E331836F9D6CA4B99BCE69857319A', secret='9D4lLGfbK8foG3tQH2uCYqe7LeRhjW2r/TksY16z')
library(rsconnect)
rsconnect::deployApp('C:\Users\Thoma\OneDrive - Aarhus Universitet (1)\dataprojekt_shiny_app')
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
library(rsconnect)
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
library(rsconnect)
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
shiny::runApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/SIMULERING')
setwd('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
runApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/SIMULERING')
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
rsconnect::showLogs(account = "gwasproject", appName = "dataprojekt_shiny_app")
rsconnect::setAccountInfo(name='gwasproject', token='DB0E331836F9D6CA4B99BCE69857319A', secret='9D4lLGfbK8foG3tQH2uCYqe7LeRhjW2r/TksY16z')
library(rsconnect)
rsconnect::deployApp('C:/Users/Thoma/OneDrive - Aarhus Universitet (1)/dataprojekt_shiny_app')
y
Y
n
runApp()
library(devtools)
library(tidyverse)
library(data.table)
library(stringr)
library(future.apply)
library(flock)
library(DT)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
shiny::runApp()
runApp()
library(devtools)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
GWAS::CreateBoxData(1)
library(GWAS)
GWAS::CreateBoxData(1)
library(devtools)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(devtools)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
GWAS::CreateBoxData(1)
GWAS::CreateBoxData(0)
GWAS::CompareBox(1)
GWAS::CompareBox(0)
total_indiv <- 100000
SNP <- 100000
h <- 0.5
sib <- 0
#Read relevant assoc-files
file_stringer_LTFH <- paste("./data/LTFH","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".QASSOC", sep="")
file_stringer_GWAX<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".ASSOC", sep="")
file_stringer_case_ctrl<- paste("./data/case_ctrl","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5.ASSOC", sep="")
ltfh <- data.table::fread(file_stringer_LTFH)
gwax <- data.table::fread(file_stringer_GWAX)
case_ctrl <- data.table::fread(file_stringer_case_ctrl)
#creating z-scores
gwax$Z <- sign(gwax$OR-1)*sqrt(gwax$CHISQ)
case_ctrl$Z <- sign(case_ctrl$OR-1)*sqrt(case_ctrl$CHISQ)
ltfh$Z <- sign(ltfh$BETA)*abs(qnorm(ltfh$P,lower.tail = FALSE))
# get true causals
file_stringer_true <- paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5.txt", sep="")
true_beta <- data.table::fread(file_stringer_true)
true_beta_causals <- true_beta %>%
dplyr::filter(V2 != 0)
#Creating subset of data based on true_causals (joined together)
zscoredata <- true_beta_causals %>%
left_join(select(ltfh,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("true_beta"="V2", "Z_ltfh" = "Z") %>%
left_join(select(gwax,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("Z_gwax" = "Z") %>%
left_join(select(case_ctrl,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("Z_case_ctrl" = "Z")
#PLOT OF LTFH VS GWAX
Lm <- lm(Z_ltfh ~ 0 + Z_gwax, data = zscoredata)
LmSum <- summary(Lm)
p1 <- ggplot(data = zscoredata, aes(Z_ltfh, Z_gwax)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for GWAX vs LT-FH")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[LT-FH])),y=expression(paste(Z[GWAX]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# PLOT OF THE LTFH VS CASE-CTRL
Lm <- lm(Z_ltfh ~ 0 + Z_case_ctrl, data = zscoredata)
LmSum <- summary(Lm)
p2 <- ggplot(data = zscoredata, aes(Z_case_ctrl, Z_ltfh)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for LT-FH vs CASE-CTRL")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[CASE_CTRL])),y=expression(paste(Z[LT-FH]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# PLOT OF THE GWAX VS CASE-CTRL
Lm <- lm(Z_gwax ~ 0 + Z_case_ctrl, data = zscoredata)
LmSum <- summary(Lm)
p3 <- ggplot(data = zscoredata, aes(Z_case_ctrl, Z_gwax)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for GWAX vs CASE-CTRL")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[CASE_CTRL])),y=expression(paste(Z[GWAX]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
library(data.table)
library(tibble)
library(dplyr)
library(tidyverse)
library(cowplot)
total_indiv <- 100000
SNP <- 100000
h <- 0.5
sib <- 0
#Read relevant assoc-files
file_stringer_LTFH <- paste("./data/LTFH","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".QASSOC", sep="")
file_stringer_GWAX<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".ASSOC", sep="")
file_stringer_case_ctrl<- paste("./data/case_ctrl","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5.ASSOC", sep="")
ltfh <- data.table::fread(file_stringer_LTFH)
gwax <- data.table::fread(file_stringer_GWAX)
case_ctrl <- data.table::fread(file_stringer_case_ctrl)
#creating z-scores
gwax$Z <- sign(gwax$OR-1)*sqrt(gwax$CHISQ)
case_ctrl$Z <- sign(case_ctrl$OR-1)*sqrt(case_ctrl$CHISQ)
ltfh$Z <- sign(ltfh$BETA)*abs(qnorm(ltfh$P,lower.tail = FALSE))
# get true causals
file_stringer_true <- paste("./data/BETA","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5.txt", sep="")
true_beta <- data.table::fread(file_stringer_true)
true_beta_causals <- true_beta %>%
dplyr::filter(V2 != 0)
#Creating subset of data based on true_causals (joined together)
zscoredata <- true_beta_causals %>%
left_join(select(ltfh,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("true_beta"="V2", "Z_ltfh" = "Z") %>%
left_join(select(gwax,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("Z_gwax" = "Z") %>%
left_join(select(case_ctrl,c(SNP,Z)), by = c("V1" = "SNP")) %>%
rename("Z_case_ctrl" = "Z")
#PLOT OF LTFH VS GWAX
Lm <- lm(Z_ltfh ~ 0 + Z_gwax, data = zscoredata)
LmSum <- summary(Lm)
p1 <- ggplot(data = zscoredata, aes(Z_ltfh, Z_gwax)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for GWAX vs LT-FH")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[LT-FH])),y=expression(paste(Z[GWAX]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# PLOT OF THE LTFH VS CASE-CTRL
Lm <- lm(Z_ltfh ~ 0 + Z_case_ctrl, data = zscoredata)
LmSum <- summary(Lm)
p2 <- ggplot(data = zscoredata, aes(Z_case_ctrl, Z_ltfh)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for LT-FH vs CASE-CTRL")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[CASE_CTRL])),y=expression(paste(Z[LT-FH]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
# PLOT OF THE GWAX VS CASE-CTRL
Lm <- lm(Z_gwax ~ 0 + Z_case_ctrl, data = zscoredata)
LmSum <- summary(Lm)
p3 <- ggplot(data = zscoredata, aes(Z_case_ctrl, Z_gwax)) +
geom_point(color="darkgrey") +
geom_smooth(method = "lm", formula = y~0+x, col = "red") +
ggtitle(paste("Z-Scores for GWAX vs CASE-CTRL")) +
geom_text(x = 0, y = 9, label = paste("Slope = ",round(LmSum$coefficients[1],3),sep=""), color = 'black') +
labs(x=expression(paste(Z[CASE_CTRL])),y=expression(paste(Z[GWAX]))) +
theme_light() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
plot_grid(p1,p2,p3,nrow=1)
library(devtools)
library(tidyverse)
library(data.table)
library(stringr)
library(future.apply)
library(flock)
library(DT)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
library(devtools)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
GWAS::linearregressionplotcc(10,100000,100000,0.05,1)
GWAS::linearregressionplotcc(10,100000,100000,0.5,1)
GWAS::linearregressionplotcc(10,100000,100000,50,1)
library(devtools)
install_github("madsemilmj/DataProjectGwas/GWAS")
library(GWAS)
GWAS::linearregressionplotcc(10,100000,100000,50,1)
setwd("C:\\Users\\Bruger\\Desktop\\DataProjectGWAS")
setwd("./GWAS")
document()
library("devtools")
setwd("C:\\Users\\Bruger\\Desktop\\DataProjectGWAS")
setwd("./GWAS")
document()
