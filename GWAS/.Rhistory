setwd("./GWAS")
document()
library(roxygen2)
setwd("./GWAS")
document()
library("devtools")
setwd("./GWAS")
document()
library(devtools)
library(tidyverse)
library(data.table)
library(stringr)
library(future.apply)
library(flock)
install_github("madsemilmj/DataprojectGwas/GWAS")
library(GWAS)
MasterFunc(1000, 100, 1000, 0.5, 10, 0.05)
library(data.table)
total_indiv <- 10000
SNP <- 50000
h <- 0.5
sib <- 0
file_stringer_LTFH <- paste("./data/LTFH","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".QASSOC", sep="")
file_stringer_GWAX<- paste("./data/GWAX","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5_",sib,".ASSOC", sep="")
file_stringer_case_ctrl<- paste("./data/case_ctrl","_",format(total_indiv,scientific = F),"_",format(SNP,scientific = F),"_",h*100,"_5.ASSOC", sep="")
ltfh <- fread(file_stringer_LTFH)
gwax <- fread(file_stringer_GWAX)
case_ctrl <- fread(file_stringer_case_ctrl)
knitr::opts_chunk$set(echo = TRUE)
h2 <- 0.5
nr_sib <- 1
library(GWAS)
library(GWAS)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
CovMatrix
library(GWAS)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(1,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
my_sample[,1]
plot(my_sample[,1])
library(GWAS)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(10,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
plot(my_sample[,1])
plot(my_sample[,2])
plot(my_sample[,3])
plot(my_sample[,4])
install.packages("spate")
library(spate)
spate::trace.plot(my_sample[,4])
spate::trace.plot(my_sample)
spate::trace.plot(t(my_sample))
par(mfrow=c(2,3))
spate::trace.plot(t(my_sample))
install.packages("coda")
library(coda)
coda::traceplot(my_sample[,1])
par(mfrow=c(2,3))
spate::trace.plot(t(my_sample), xlab="HEY")
par(mfrow=c(2,3))
spate::trace.plot(t(my_sample))
to.list(my_sample[,1])
plot(my_sample[,4], type = "l")
plot(my_sample[,1], type = "l")
library(GWAS)
install.packages("spate")
library(spate)
install.packages("coda")
library(coda)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(10,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
plot(my_sample[,1], type = "l")
install.packages("spate")
install.packages("coda")
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(10,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
plot(my_sample[,1], type = "l")
set.seed(18)
set.seed(18)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(10,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
plot(my_sample[,1], type = "l")
set.seed(18)
h2 <- 0.5
nr_sib <- 1
CovMatrix <- GWAS::LinearTransformation(GWAS::CovarianceMatrix(h2,nr_sib))
LowerBound <- rep(-Inf,nrow(CovMatrix)-1)
UpperBound <- rep(Inf,nrow(CovMatrix)-1)
CondInfo <- GWAS::ConditionalDistribution(CovMatrix)
sigma <- CondInfo$sigma
mu <- CondInfo$mu
#Drawing from truncated
S <- 6000
my_sample <- matrix(ncol = (length(LowerBound)+1), nrow = S)
vals <- rep(10,(length(LowerBound)+1))
for (i in 1:S){
#Child gen
vals[1] <- rnorm(1,mu[1,] %*% vals[2:length(vals)], sqrt(sigma[1]))
#REST
for (p in 2:(length(LowerBound)+1)){
mu_prod <- mu[p,] %*% vals[-p]
l1 <- pnorm(LowerBound[p-1], mu_prod, sqrt(sigma[p]))
u1 <- pnorm(UpperBound[p-1], mu_prod, sqrt(sigma[p]))
g1 <- runif(1,l1,u1)
vals[p] <- qnorm(g1,mu_prod, sqrt(sigma[p]))
}
my_sample[i,] <- vals
}
plot(my_sample[,1], type = "l")
plot(my_sample[,1], type = "l")
abline(v = 100)
plot(my_sample[,1], type = "l")
abline(v = 100, col = "red", lw = 2)
cov(my_sample)
colMeans(my_sample)
colMeans(my_sample[100:,])
colMeans(my_sample[100:S,])
colMeans(my_sample[1000:S,])
colMeans(my_sample[100:S,])
cov(my_sample[100:S,])
acf(my_sample[,1])
acf(my_sample[,1], main = "TEST")
install.packages("latex2exp")
library(latex2exp)
acf(my_sample[,1], main = latex2exp::TeX('AutoCorrelationPlot for $\epsilon$'))
acf(my_sample[,1], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon$'))
par(mfrow=c(5,2))
#1
plot(my_sample[,1], type = "l")
par(mfrow=c(5,2))
plot(my_sample[,1], type = "l")
par(mfrow=c(5,2))
plot(my_sample[,1], type = "l")
par(mfrow=c(2,5))
plot(my_sample[,1], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('AutoCorrelationPlot for $\\epsilon_{s}$'))
par(mfrow=c(2,5))
plot(my_sample[,1], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2))
plot(my_sample[,1], type = "l")
matrix(c(1,1,2,3), 2, 2, byrow = TRUE)
matrix(c(1,2,3,4,5,6,7,8,9,10), 2, 2, byrow = TRUE)
matrix(c(1,2,3,4,5,6,7,8,9,10), 5, 2, byrow = TRUE)
layout(matrix(c(1,2,3,4,5,6,7,8,9,10), 5, 2, byrow = TRUE))
plot(my_sample[,1], type = "l")
layout(matrix(c(1,2,3,4,5,6,7,8,9,10), 5, 2, byrow = TRUE))
plot(my_sample[,1], type = "l", main="LOL")
par(mfrow=c(5,2), mar=c(1,1,1,1))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(2,1,1,1))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(3,1,1,1))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(3,3,3,3))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(10,10,10,10))
plot(my_sample[,1], type = "l", main="LOL")
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(8,8,8,8))
plot(my_sample[,1], type = "l", main="LOL")
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(6,6,6,6))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(1,1,1,1))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(3,1,1,1), oma = c(0,0,0,0))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
par(mfrow=c(5,2), mar=c(10,10,10,10), oma = c(0,0,0,0))
plot(my_sample[,1], type = "l", main="LOL")
par(mfrow=c(5,2), mar=c(5,5,5,5), oma = c(0,0,0,0))
plot(my_sample[,1], type = "l", main="LOL")
par(mfrow=c(5,2), mar=c(1,1,1,1), oma = c(0,0,0,0))
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
dev.size()
dev.size(2)
dev.size(2)
dev.size(units = "cm")
par(mfrow=c(5,2), mar=c(1,1,1,1), oma = c(0,0,0,0), "din")
par(mfrow=c(5,2), mar=c(1,1,1,1), oma = c(0,0,0,0), "din")
plot(my_sample[,1], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,1], main = latex2exp::TeX('for $\\epsilon_{o,g}$'))
plot(my_sample[,2], type = "l",main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,2], main = latex2exp::TeX('for $\\epsilon_{o}$'))
plot(my_sample[,3], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,3], main = latex2exp::TeX('for $\\epsilon_{p_1}$'))
plot(my_sample[,4], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,4], main = latex2exp::TeX('for $\\epsilon_{p_2}$'))
plot(my_sample[,5], type = "l", main="LOL")
abline(v = 100, col = "red", lw = 2)
acf(my_sample[,5], main = latex2exp::TeX('for $\\epsilon_{s}$'))
knitr::opts_chunk$set(echo = TRUE, fig.width=10, fig.height=16)
library(GWAS)
library(latex2exp)
pnorm(-Inf,0,1)
pnorm(Inf,0,1)
```{r setup, include=FALSE}
Bla bla bla bla
```{r setup, include=FALSE}
install.packages("here")
library(here)
setwd("C:\\Users\\Bruger\\Desktop\\DataProjectGWAS")
setwd("./GWAS")
library("devtools")
document()
setwd("C:\\Users\\Bruger\\Desktop\\DataProjectGWAS")
setwd("./GWAS")
document()
